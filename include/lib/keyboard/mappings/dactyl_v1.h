#ifndef DACTYL_V1_MAPPINGS_H
#define DACTYL_V1_MAPPINGS_H

#include <lib/keyboard/kb_mappings.h>

// LEFT:

RULES_FOR_KEY(KEY00){
    RULES_SIMPLE(KEY_EQUALS_PLUS),
};
RULES_FOR_KEY(KEY01){
    RULES_SIMPLE(KEY_TAB),
};
RULES_FOR_KEY(KEY02){
    RULES_SIMPLE(KEY_CAPSLOCK),
};
RULES_MOD_KEY(KEY03, KEY_LEFTSHIFT);

RULES_FOR_KEY(KEY10){
    RULE(MOD_ANYLAYER, KEY_F1, false),
    RULES_SIMPLE(KEY_1_EXCLAMATION),
};
RULES_FOR_KEY(KEY11){
    RULES_SIMPLE(KEY_Q),
};
RULES_FOR_KEY(KEY12){
    RULES_SIMPLE(KEY_A),
};
RULES_FOR_KEY(KEY13){
    RULES_SIMPLE(KEY_Z),
};
RULES_FOR_KEY(KEY14){
    RULES_SIMPLE(KEY_GRAVEACCENT_TILDE),
};

RULES_FOR_KEY(KEY20){
    RULE(MOD_ANYLAYER, KEY_F2, false),
    RULES_SIMPLE(KEY_2_ATSIGN),
};
RULES_FOR_KEY(KEY21){
    RULES_SIMPLE(KEY_W),
};
RULES_FOR_KEY(KEY22){
    RULES_SIMPLE(KEY_S),
};
RULES_FOR_KEY(KEY23){
    RULES_SIMPLE(KEY_X),
};
RULES_MOD_KEY(KEY24, KEY_LEFTFN);

RULES_FOR_KEY(KEY30){
    RULE(MOD_ANYLAYER, KEY_F3, false),
    RULES_SIMPLE(KEY_3_NUMBERSIGN),
};
RULES_FOR_KEY(KEY31){
    RULES_SIMPLE(KEY_E),
};
RULES_FOR_KEY(KEY32){
    RULES_SIMPLE(KEY_D),
};
RULES_FOR_KEY(KEY33){
    RULES_SIMPLE(KEY_C),
};
RULES_FOR_KEY(KEY34){
    RULES_SIMPLE(KEY_LEFTARROW),
};

RULES_FOR_KEY(KEY40){
    RULE(MOD_ANYLAYER, KEY_F4, false),
    RULES_SIMPLE(KEY_4_DOLLARSIGN),
};
RULES_FOR_KEY(KEY41){
    RULES_SIMPLE(KEY_R),
};
RULES_FOR_KEY(KEY42){
    RULES_SIMPLE(KEY_F),
};
RULES_FOR_KEY(KEY43){
    RULES_SIMPLE(KEY_V),
};
RULES_FOR_KEY(KEY44){
    RULES_SIMPLE(KEY_RIGHTARROW),
};

RULES_FOR_KEY(KEY50){
    RULE(MOD_ANYLAYER, KEY_F5, false),
    RULES_SIMPLE(KEY_5_PERCENTSIGN),
};
RULES_FOR_KEY(KEY51){
    RULES_SIMPLE(KEY_T),
};
RULES_FOR_KEY(KEY52){
    RULES_SIMPLE(KEY_G),
};
RULES_FOR_KEY(KEY53){
    RULES_SIMPLE(KEY_B),
};
RULES_FOR_KEY(KEY54){
    RULES_SIMPLE(KEY_SPACEBAR),
};

RULES_FOR_KEY(KEY60){
    RULES_SIMPLE(KEY_ESCAPE),
};
RULES_FOR_KEY(KEY61){
    RULES_SIMPLE(KEY_BACKSPACE),
};

RULES_MOD_KEY(KEY70, KEY_LEFTCOMMAND);
RULES_MOD_KEY(KEY71, KEY_LEFTOPTION);
RULES_MOD_KEY(KEY72, KEY_LEFTCONTROL);

// RIGHT

RULES_MOD_KEY(KEY80, KEY_RIGHTCOMMAND);
RULES_MOD_KEY(KEY81, KEY_RIGHTOPTION);
RULES_MOD_KEY(KEY82, KEY_RIGHTCONTROL);

RULES_MOD_KEY(KEY90, KEY_RIGHTFN);
RULES_FOR_KEY(KEY91){
    RULES_SIMPLE(KEY_RETURN),
};

RULES_FOR_KEY(KEY100){
    RULE(MOD_ANYLAYER, KEY_F6, false),
    RULES_SIMPLE(KEY_6_CARET),
};
RULES_FOR_KEY(KEY101){
    RULES_SIMPLE(KEY_Y),
};
RULES_FOR_KEY(KEY102){
    RULES_SIMPLE(KEY_H),
};
RULES_FOR_KEY(KEY103){
    RULES_SIMPLE(KEY_N),
};
RULES_FOR_KEY(KEY104){
    RULES_SIMPLE(KEY_SPACEBAR),
};

RULES_FOR_KEY(KEY110){
    RULE(MOD_ANYLAYER, KEY_F7, false),
    RULES_SIMPLE(KEY_7_AMPERSAND),
};
RULES_FOR_KEY(KEY111){
    RULES_SIMPLE(KEY_U),
};
RULES_FOR_KEY(KEY112){
    RULES_SIMPLE(KEY_J),
};
RULES_FOR_KEY(KEY113){
    RULES_SIMPLE(KEY_M),
};
RULES_FOR_KEY(KEY114){
    RULES_SIMPLE(KEY_DOWNARROW),
};

RULES_FOR_KEY(KEY120){
    RULE(MOD_ANYLAYER, KEY_F8, false),
    RULES_SIMPLE(KEY_8_STAR),
};
RULES_FOR_KEY(KEY121){
    RULES_SIMPLE(KEY_I),
};
RULES_FOR_KEY(KEY122){
    RULES_SIMPLE(KEY_K),
};
RULES_FOR_KEY(KEY123){
    RULES_SIMPLE(KEY_COMMA_LESSTHAN),
};
RULES_FOR_KEY(KEY124){
    RULES_SIMPLE(KEY_UPARROW),
};

RULES_FOR_KEY(KEY130){
    RULE(MOD_ANYLAYER, KEY_F9, false),
    RULES_SIMPLE(KEY_9_LPAREN),
};
RULES_FOR_KEY(KEY131){
    RULES_SIMPLE(KEY_O),
};
RULES_FOR_KEY(KEY132){
    RULES_SIMPLE(KEY_L),
};
RULES_FOR_KEY(KEY133){
    RULES_SIMPLE(KEY_DOT_GREATERTHAN),
};
RULES_FOR_KEY(KEY134){
    RULES_SIMPLE(KEY_SQBRACKETL_CURBRACEL),
};

RULES_FOR_KEY(KEY140){
    RULE(MOD_ANYLAYER, KEY_F10, false),
    RULES_SIMPLE(KEY_0_RPAREN),
};
RULES_FOR_KEY(KEY141){
    RULES_SIMPLE(KEY_P),
};
RULES_FOR_KEY(KEY142){
    RULES_SIMPLE(KEY_SEMICOLON_COLON),
};
RULES_FOR_KEY(KEY143){
    RULES_SIMPLE(KEY_SLASH_QUESTIONMARK),
};
RULES_FOR_KEY(KEY144){
    RULES_SIMPLE(KEY_SQBRACKETR_CURBRACER),
};

RULES_FOR_KEY(KEY150){
    RULE(MOD_ANYLAYER, KEY_F12, false),
    RULES_SIMPLE(KEY_MINUS_UNDERSCORE),
};
RULES_FOR_KEY(KEY151){
    RULES_SIMPLE(KEY_BACKSLASH_VERTICALBAR),
};
RULES_FOR_KEY(KEY152){
    RULES_SIMPLE(KEY_APOSTROPHE_QUOTES),
};
RULES_MOD_KEY(KEY153, KEY_RIGHTSHIFT);

DEFAULT_KEYMAP_DEFINE(
    KEY(KEY70), KEY(KEY71), KEY(KEY72), KEY(KEY61), KEY(KEY54), KEY(KEY50),
    KEY(KEY51), KEY(KEY52), KEY(KEY53), {0}, KEY(KEY60), KEY(KEY40), KEY(KEY41),
    KEY(KEY42), KEY(KEY43), KEY(KEY44), KEY(KEY30), KEY(KEY31), KEY(KEY32),
    KEY(KEY33), KEY(KEY34), KEY(KEY20), KEY(KEY21), KEY(KEY22), KEY(KEY23),
    KEY(KEY24), KEY(KEY10), KEY(KEY11), KEY(KEY12), KEY(KEY13), KEY(KEY14),
    KEY(KEY00), KEY(KEY01), KEY(KEY02), KEY(KEY03), KEY(KEY80), KEY(KEY81),
    KEY(KEY82), KEY(KEY91), KEY(KEY104), KEY(KEY100), KEY(KEY101), KEY(KEY102),
    KEY(KEY103), {0}, KEY(KEY90), KEY(KEY110), KEY(KEY111), KEY(KEY112),
    KEY(KEY113), KEY(KEY114), KEY(KEY120), KEY(KEY121), KEY(KEY122),
    KEY(KEY123), KEY(KEY124), KEY(KEY130), KEY(KEY131), KEY(KEY132),
    KEY(KEY133), KEY(KEY134), KEY(KEY140), KEY(KEY141), KEY(KEY142),
    KEY(KEY143), KEY(KEY144), KEY(KEY150), KEY(KEY151), KEY(KEY152),
    KEY(KEY153));

#endif // DACTYL_V1_MAPPINGS_H
