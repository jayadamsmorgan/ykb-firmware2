#ifndef DACTYL_V1_MAPPINGS_H
#define DACTYL_V1_MAPPINGS_H

#include <lib/keyboard/kb_mappings.h>

// LEFT:

RULES_FOR_KEY(KEY00) = {
    RULE(LAYER1, KEY_F11),
    RULE(LAYER0, KEY_EQUALS_PLUS),
};
RULES_FOR_KEY(KEY01) = {
    RULE(LAYER0, KEY_TAB),
};
RULES_FOR_KEY(KEY02) = {
    RULE(LAYER0, KEY_CAPSLOCK),
};
RULES_FOR_SIMPLE_KEY(KEY03, KEY_LEFTSHIFT);

RULES_FOR_KEY(KEY10) = {
    RULE(LAYER1, KEY_F1),
    RULE(LAYER0, KEY_1_EXCLAMATION),
};
RULES_FOR_KEY(KEY11) = {
    RULE(LAYER0, KEY_Q),
};
RULES_FOR_KEY(KEY12) = {
    RULE(LAYER0, KEY_A),
};
RULES_FOR_KEY(KEY13) = {
    RULE(LAYER0, KEY_Z),
};
RULES_FOR_KEY(KEY14) = {
    RULE(LAYER0, KEY_GRAVEACCENT_TILDE),
};

RULES_FOR_KEY(KEY20) = {
    RULE(LAYER1, KEY_F2),
    RULE(LAYER0, KEY_2_ATSIGN),
};
RULES_FOR_KEY(KEY21) = {
    RULE(LAYER0, KEY_W),
};
RULES_FOR_KEY(KEY22) = {
    RULE(LAYER0, KEY_S),
};
RULES_FOR_KEY(KEY23) = {
    RULE(LAYER0, KEY_X),
};
RULES_FOR_SIMPLE_KEY(KEY24, KEY_FN);

RULES_FOR_KEY(KEY30) = {
    RULE(LAYER1, KEY_F3),
    RULE(LAYER0, KEY_3_NUMBERSIGN),
};
RULES_FOR_KEY(KEY31) = {
    RULE(LAYER0, KEY_E),
};
RULES_FOR_KEY(KEY32) = {
    RULE(LAYER0, KEY_D),
};
RULES_FOR_KEY(KEY33) = {
    RULE(LAYER0, KEY_C),
};
RULES_FOR_KEY(KEY34) = {
    RULE(LAYER0, KEY_LEFTARROW),
};

RULES_FOR_KEY(KEY40) = {
    RULE(LAYER1, KEY_F4),
    RULE(LAYER0, KEY_4_DOLLARSIGN),
};
RULES_FOR_KEY(KEY41) = {
    RULE(LAYER0, KEY_R),
};
RULES_FOR_KEY(KEY42) = {
    RULE(LAYER0, KEY_F),
};
RULES_FOR_KEY(KEY43) = {
    RULE(LAYER0, KEY_V),
};
RULES_FOR_KEY(KEY44) = {
    RULE(LAYER0, KEY_RIGHTARROW),
};

RULES_FOR_KEY(KEY50) = {
    RULE(LAYER1, KEY_F5),
    RULE(LAYER0, KEY_5_PERCENTSIGN),
};
RULES_FOR_KEY(KEY51) = {
    RULE(LAYER0, KEY_T),
};
RULES_FOR_KEY(KEY52) = {
    RULE(LAYER0, KEY_G),
};
RULES_FOR_KEY(KEY53) = {
    RULE(LAYER0, KEY_B),
};
RULES_FOR_KEY(KEY54) = {
    RULE(LAYER0, KEY_SPACEBAR),
};

RULES_FOR_KEY(KEY60) = {
    RULE(LAYER0, KEY_ESCAPE),
};
RULES_FOR_KEY(KEY61) = {
    RULE(LAYER0, KEY_BACKSPACE),
};

RULES_FOR_SIMPLE_KEY(KEY70, KEY_LEFTCOMMAND);
RULES_FOR_SIMPLE_KEY(KEY71, KEY_LEFTOPTION);
RULES_FOR_SIMPLE_KEY(KEY72, KEY_LEFTCONTROL);

// RIGHT

RULES_FOR_SIMPLE_KEY(KEY80, KEY_RIGHTCOMMAND);
RULES_FOR_SIMPLE_KEY(KEY81, KEY_RIGHTOPTION);
RULES_FOR_SIMPLE_KEY(KEY82, KEY_RIGHTCONTROL);

RULES_FOR_SIMPLE_KEY(KEY90, KEY_LAYER1);
RULES_FOR_KEY(KEY91) = {
    RULE(LAYER0, KEY_RETURN),
};

RULES_FOR_KEY(KEY100) = {
    RULE(LAYER1, KEY_F6),
    RULE(LAYER0, KEY_6_CARET),
};
RULES_FOR_KEY(KEY101) = {
    RULE(LAYER0, KEY_Y),
};
RULES_FOR_KEY(KEY102) = {
    RULE(LAYER0, KEY_H),
};
RULES_FOR_KEY(KEY103) = {
    RULE(LAYER0, KEY_N),
};
RULES_FOR_KEY(KEY104) = {
    RULE(LAYER0, KEY_SPACEBAR),
};

RULES_FOR_KEY(KEY110) = {
    RULE(LAYER1, KEY_F7),
    RULE(LAYER0, KEY_7_AMPERSAND),
};
RULES_FOR_KEY(KEY111) = {
    RULE(LAYER0, KEY_U),
};
RULES_FOR_KEY(KEY112) = {
    RULE(LAYER0, KEY_J),
};
RULES_FOR_KEY(KEY113) = {
    RULE(LAYER0, KEY_M),
};
RULES_FOR_KEY(KEY114) = {
    RULE(LAYER0, KEY_DOWNARROW),
};

RULES_FOR_KEY(KEY120) = {
    RULE(LAYER1, KEY_F8),
    RULE(LAYER0, KEY_8_STAR),
};
RULES_FOR_KEY(KEY121) = {
    RULE(LAYER0, KEY_I),
};
RULES_FOR_KEY(KEY122) = {
    RULE(LAYER0, KEY_K),
};
RULES_FOR_KEY(KEY123) = {
    RULE(LAYER0, KEY_COMMA_LESSTHAN),
};
RULES_FOR_KEY(KEY124) = {
    RULE(LAYER0, KEY_UPARROW),
};

RULES_FOR_KEY(KEY130) = {
    RULE(LAYER1, KEY_F9),
    RULE(LAYER0, KEY_9_LPAREN),
};
RULES_FOR_KEY(KEY131) = {
    RULE(LAYER0, KEY_O),
};
RULES_FOR_KEY(KEY132) = {
    RULE(LAYER0, KEY_L),
};
RULES_FOR_KEY(KEY133) = {
    RULE(LAYER0, KEY_DOT_GREATERTHAN),
};
RULES_FOR_KEY(KEY134) = {
    RULE(LAYER0, KEY_SQBRACKETL_CURBRACEL),
};

RULES_FOR_KEY(KEY140) = {
    RULE(LAYER1, KEY_F10),
    RULE(LAYER0, KEY_0_RPAREN),
};
RULES_FOR_KEY(KEY141) = {
    RULE(LAYER0, KEY_P),
};
RULES_FOR_KEY(KEY142) = {
    RULE(LAYER0, KEY_SEMICOLON_COLON),
};
RULES_FOR_KEY(KEY143) = {
    RULE(LAYER0, KEY_SLASH_QUESTIONMARK),
};
RULES_FOR_KEY(KEY144) = {
    RULE(LAYER0, KEY_SQBRACKETR_CURBRACER),
};

RULES_FOR_KEY(KEY150) = {
    RULE(LAYER1, KEY_F12),
    RULE(LAYER0, KEY_MINUS_UNDERSCORE),
};
RULES_FOR_KEY(KEY151) = {
    RULE(LAYER0, KEY_BACKSLASH_VERTICALBAR),
};
RULES_FOR_KEY(KEY152) = {
    RULE(LAYER0, KEY_APOSTROPHE_QUOTES),
};
RULES_FOR_SIMPLE_KEY(KEY153, KEY_RIGHTSHIFT);

// The sequence in which keys are mapped to the physical key sequence in kscan.
// Modify with caution

DEFAULT_KEYMAP_DEFINE(
    KEY(KEY70), KEY(KEY71), KEY(KEY72), KEY(KEY61), KEY(KEY54), KEY(KEY50),
    KEY(KEY51), KEY(KEY52), KEY(KEY53), {0}, KEY(KEY60), KEY(KEY40), KEY(KEY41),
    KEY(KEY42), KEY(KEY43), KEY(KEY44), KEY(KEY30), KEY(KEY31), KEY(KEY32),
    KEY(KEY33), KEY(KEY34), KEY(KEY20), KEY(KEY21), KEY(KEY22), KEY(KEY23),
    KEY(KEY24), KEY(KEY10), KEY(KEY11), KEY(KEY12), KEY(KEY13), KEY(KEY14),
    KEY(KEY00), KEY(KEY01), KEY(KEY02), KEY(KEY03), KEY(KEY80), KEY(KEY81),
    KEY(KEY82), KEY(KEY91), KEY(KEY104), KEY(KEY100), KEY(KEY101), KEY(KEY102),
    KEY(KEY103), {0}, KEY(KEY90), KEY(KEY110), KEY(KEY111), KEY(KEY112),
    KEY(KEY113), KEY(KEY114), KEY(KEY120), KEY(KEY121), KEY(KEY122),
    KEY(KEY123), KEY(KEY124), KEY(KEY130), KEY(KEY131), KEY(KEY132),
    KEY(KEY133), KEY(KEY134), KEY(KEY140), KEY(KEY141), KEY(KEY142),
    KEY(KEY143), KEY(KEY144), KEY(KEY150), KEY(KEY151), KEY(KEY152),
    KEY(KEY153));

#endif // DACTYL_V1_MAPPINGS_H
